package com.gentics.dependency.reporting;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import com.gentics.dependency.reporting.composer.model.Dependency;
import com.gentics.dependency.reporting.composer.model.DependencyReport;
import com.gentics.dependency.reporting.out.model.OutDependency;

/**
 * Reads the dependencies file, which is supposed to be generated by a command like <code>composer info --direct --no-dev --locked --latest --ignore-platform-reqs -f json</code>
 */
@Mojo(name = "composer-transform", defaultPhase = LifecyclePhase.PACKAGE, threadSafe = true)
public class TransformComposerReportMojo extends AbstractOutputMojo {
	/**
	 * Dependencies file to be read. The file must be in JSON format and should be generated by a command like <code>composer info --direct --no-dev --locked --latest --ignore-platform-reqs -f json</code>.
	 */
	@Parameter(required = true)
	private File dependenciesFile;

	@Override
	public void execute() throws MojoExecutionException, MojoFailureException {
		Log log = getLog();
		if (isSkip()) {
			log.info("Skipping the execution.");
			return;
		}

		log.info(String.format("Reading dependencies from %s", dependenciesFile.getAbsolutePath()));
		DependencyReport report = readFromJsonFile(dependenciesFile, DependencyReport.class);

		if (CollectionUtils.isEmpty(report.getLocked())) {
			log.info("Did not find any dependencies");
		} else {
			report.getLocked().removeIf(dep -> ignoreDependency(dep.getName()));

			log.info(String.format("Found %d dependencies", report.getLocked().size()));
		}

		List<OutDependency> dependencies = new ArrayList<>();
		if (!CollectionUtils.isEmpty(report.getLocked())) {
			for (Dependency dep : report.getLocked()) {
				String name = dep.getName();
				String current = dep.getVersion();
				String latest = dep.getLatest();
				if (StringUtils.isEmpty(latest)) {
					latest = current;
				}

				dependencies.add(new OutDependency().setName(name).setCurrent(current).setLatest(latest));
			}
		}

		outputDependencies(dependencies);
	}
}
